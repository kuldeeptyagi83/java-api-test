plugins {
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
        mavenCentral()
}

ext {
    karateVersion = '1.5.1'
}

sourceSets {
    karate {
        java {
            srcDirs = ['src/karate/java']
        }
        resources {
            srcDirs = ['src/karate/java']
            exclude '**/*.java'
        }
    }

}

configurations {
    karateImplementation.extendsFrom testImplementation
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.h2database:h2:2.1.214'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    karateImplementation "io.karatelabs:karate-core:${karateVersion}"
    testImplementation 'org.mockito:mockito-core'
}

test {
    useJUnitPlatform()
//    enabling html reports as well for gradle tests
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
    outputs.upToDateWhen { false }
}

tasks.register('karateTest', Test) {
    description = 'Runs the Karate tests.'
    group = 'verification'
    testClassesDirs = sourceSets.karate.output.classesDirs
    classpath = sourceSets.karate.runtimeClasspath
    useJUnitPlatform()
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}
